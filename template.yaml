AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  IncomingEmailAddress:
    Description: Enter the email address that will be used for incoming MFA emails. This email address will be used in the SES Receipt Rule
    Type: String
Globals:
  Function:
    Runtime: python3.7
    Timeout: 20
    Handler: index.handler
    AutoPublishAlias: prod
    Environment:
      Variables:
        table: !Ref TableHashedEmails
        bucket: !Ref BucketArloMFA
Resources:
  BucketArloMFA:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256  # i got tired of fighting with KMS for SES and S3...feel free to continue the pursuit
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1  # S3 only has days - so set to the minimum - https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#intro-lifecycle-rules-actions (Lifecycle rules: Based on an object's age)
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketArloMFAPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketArloMFA
      PolicyDocument:
        Version: 2012-10-17
        Statement:  # from here: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${BucketArloMFA.Arn}/emails/*'
            Condition:
              StringEquals:
                aws:Referer: !Ref AWS::AccountId
  TableHashedEmails:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: hashed_email
          AttributeType: S
      BillingMode: PROVISIONED  # the RCU and WCU are set at the "forever free tier" level
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25
      KeySchema:
        - AttributeName: hashed_email
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      TimeToLiveSpecification:  # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html
        AttributeName: expires_at
        Enabled: true
  LambdaPreMFAStager:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/pre-mfa-stager/
      Description: Will accept an email address and store in dynamo - this is the pre/staging step before the user attempts to login to Arlo and generate the MFA email
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Method: post
            Path: /prepare-arlo-mfa
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt TableHashedEmails.Arn
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject # need GetObject so we can presign urls
              Resource: !Sub '${BucketArloMFA.Arn}/codes/*'
  LambdaMFAEmailHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/mfa-email-handler/
      Description: Will be invoked by the SES incoming email receipt rule and process the emails to extract the code and store that code in S3
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !GetAtt TableHashedEmails.Arn
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub '${BucketArloMFA.Arn}/codes/*'
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub '${BucketArloMFA.Arn}/emails/*'
  IncomingEmailReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
  IncomingEmailReceiptRule:
    Type: AWS::SES::ReceiptRule
    DependsOn:
      - BucketArloMFAPolicy
    Properties:
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref BucketArloMFA
              ObjectKeyPrefix: emails/
          - LambdaAction:
              FunctionArn: !Ref LambdaMFAEmailHandler.Alias
              InvocationType: Event
        Enabled: true
        Recipients:
          - !Ref IncomingEmailAddress
        ScanEnabled: true
        TlsPolicy: Require
      RuleSetName: !Ref IncomingEmailReceiptRuleSet
  LambdaPermissionForSES: # https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaMFAEmailHandler.Alias
      Principal: ses.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
  LogGroupLambdaPreMFAStager:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaPreMFAStager}'
      RetentionInDays: 1
  LogGroupLambdaMFAEmailHandler:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaMFAEmailHandler}'
      RetentionInDays: 1
Outputs:
  PreMFAStageURL:
    Value: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/prepare-arlo-mfa'
